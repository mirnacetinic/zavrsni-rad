// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  HOST
}

enum AccommodationType {
  House
  Villa
  Apartment
  Room
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  surname        String
  email          String          @unique
  hashPassword   String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           Role            @default(USER)
  accommodations Accommodation[]
  reservations   Reservation[]
  favourites     UserFavorites[]
  reviews        Review[]
}

model Location {
  id             Int             @id @default(autoincrement())
  country        String
  city           String
  zip            String          @unique
  accommodations Accommodation[]
}

model Accommodation {
  id          Int               @id @default(autoincrement())
  title       String
  type        AccommodationType
  description String
  locationId  Int
  location    Location          @relation(fields: [locationId], references: [id])
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  units       Unit[]
  imageUrl    String?
}

model Unit {
  id              Int               @id @default(autoincrement())
  title           String
  type            AccommodationType
  description     String
  capacity        Int
  amenities       UnitAmenity[]
  accommodationId Int
  accommodation   Accommodation     @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  likedBy         UserFavorites[]
  reviews         Review[]
  reservations    Reservation[]
}

model Amenity {
  id    Int           @id @default(autoincrement())
  name  String
  units UnitAmenity[]
}

model UnitAmenity {
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId Int
  unit      Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId    Int

  @@id([amenityId, unitId])
}

model UserFavorites {
  unit   Unit @relation(fields: [unitId], references: [id])
  user   User @relation(fields: [userId], references: [id])
  unitId Int
  userId Int

  @@id([unitId, userId])
}

model Reservation {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  guests   Int
  checkIn  DateTime
  checkOut DateTime
  unitId   Int
  unit     Unit     @relation(fields: [unitId], references: [id])
}

model Review {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  unitId Int
  unit   Unit @relation(fields: [unitId], references: [id])
}
